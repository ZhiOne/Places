{"version":3,"sources":["shared/util/uploadImg.js","places/pages/NewPlace.js","shared/util/validators.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/components/FormElements/ImageUpload.js"],"names":["uploadImg","data","a","instance","axios","create","baseURL","defaults","headers","common","post","then","response","statusText","status","console","log","url","catch","err","NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","isValid","description","address","image","formState","inputHandler","history","useHistory","placeSubmitHandler","event","preventDefault","formData","FormData","append","inputs","img","process","Authorization","token","push","Fragment","ErrorModal","onClear","className","onSubmit","LoadingSpinner","asOverlay","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","ImageUpload","Button","disabled","val","VALIDATOR_EMAIL","validate","validator","trim","length","test","inputReducer","state","action","isTouched","props","useReducer","initialValue","initialValid","inputState","dispatch","useEffect","changeHandler","target","touchHandler","placeholder","onChange","onBlur","rows","htmlFor","formReducer","formIsValid","inputId","initialInputs","initialFormValidity","useCallback","inputData","formValidity","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","pickedFile","fileIsValid","files","center","src","alt","onClick","current","click"],"mappings":"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","file":"static/js/5.03b0516f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst uploadImg = async data => {\r\n  const instance = axios.create({\r\n    baseURL: 'https://api.cloudinary.com/v1_1/dbhbfcaid/image',\r\n  });\r\n\r\n  instance.defaults.headers.common = {};\r\n  await instance\r\n    .post('/upload', data, {\r\n        headers: {\r\n          'Content-Type': null,\r\n        },\r\n      },\r\n    )\r\n    .then(response => {\r\n      if (response.statusText === 'OK' && response.status === 200) {\r\n        console.log(response);\r\n        return response.data.url;\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n      return err\r\n    });\r\n};\r\n\r\nexport default uploadImg;\r\n","import React, { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport uploadImg from \"../../shared/util/uploadImg\";\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH\r\n} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './PlaceForm.css';\r\n\r\nconst NewPlace = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [formState, inputHandler] = useForm(\r\n    {\r\n      title: {\r\n        value: '',\r\n        isValid: false\r\n      },\r\n      description: {\r\n        value: '',\r\n        isValid: false\r\n      },\r\n      address: {\r\n        value: '',\r\n        isValid: false\r\n      },\r\n      image: {\r\n        value: null,\r\n        isValid: false\r\n      }\r\n    },\r\n    false\r\n  );\r\n\r\n  const history = useHistory();\r\n\r\n  const placeSubmitHandler = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('title', formState.inputs.title.value);\r\n      formData.append('description', formState.inputs.description.value);\r\n      formData.append('address', formState.inputs.address.value);\r\n      const img = await uploadImg(formState.inputs.image.value);\r\n      formData.append('image', img);\r\n      await sendRequest(process.env.REACT_APP_BACKEND_URL + '/places', 'POST', formData, {\r\n        Authorization: 'Bearer ' + auth.token\r\n      });\r\n      history.push('/');\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <Input\r\n          id=\"title\"\r\n          element=\"input\"\r\n          type=\"text\"\r\n          label=\"Title\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter a valid title.\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"description\"\r\n          element=\"textarea\"\r\n          label=\"Description\"\r\n          validators={[VALIDATOR_MINLENGTH(5)]}\r\n          errorText=\"Please enter a valid description (at least 5 characters).\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"address\"\r\n          element=\"input\"\r\n          label=\"Address\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter a valid address.\"\r\n          onInput={inputHandler}\r\n        />\r\n        <ImageUpload\r\n          id=\"image\"\r\n          onInput={inputHandler}\r\n          errorText=\"Please provide an image.\"\r\n        />\r\n        <Button type=\"submit\" disabled={!formState.isValid}>\r\n          ADD PLACE\r\n        </Button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewPlace;\r\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${!inputState.isValid &&\n        inputState.isTouched &&\n        'form-control--invalid'}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid }\n        },\n        isValid: formIsValid\n      };\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};","import React, { useRef, useState, useEffect } from 'react';\n\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedHandler = event => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: 'none' }}\n        type=\"file\"\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n"],"sourceRoot":""}